///////////////////////////////////////////////////////////////////////////////
//  1. Block Diagram Schema  //////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export type BlockDiagramSchema = {
    page_template: string,
    templates: Template[]
}


///////////////////////////////////////////////////////////////////////////////
//  2. Template Types  ////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export enum TemplateType {
    AnchorPoint     = 0,
    DictionaryBlock = 1,
    Page            = 2,
    TextBlock       = 3,
}

export type Template 
    = AnchorPointTemplate
    | DictionaryBlockTemplate
    | PageTemplate 
    | TextBlockTemplate


///////////////////////////////////////////////////////////////////////////////
//  3. Generic Template  //////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export type ObjectTemplate = {
    name: string;
}


///////////////////////////////////////////////////////////////////////////////
//  4. Diagram Anchor Template  ///////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export type AnchorTemplate = ObjectTemplate & {
    radius: number
}


///////////////////////////////////////////////////////////////////////////////
//  4. Anchor Point Template  /////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export type AnchorPointTemplate = AnchorTemplate & {
    type: TemplateType.AnchorPoint
}


///////////////////////////////////////////////////////////////////////////////
//  5. Dictionary Block Template  /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export type DictionaryBlockTemplate = ObjectTemplate & {
    type: TemplateType.DictionaryBlock,
    color: string,
    fields: {
        [key: string]: Field
    },
    anchor_template: string
}

export type Field 
    = FieldBase<"int">
    | FieldBase<"float">
    | FieldBase<"string">
    | FieldBase<"date">
    | FieldBase<"boolean">

interface FieldBase<K extends keyof FieldTypes> {
    type     : K, 
    value    : FieldTypes[K]
    // required : boolean 
}

interface FieldTypes {
    "int"     : number,
    "float"   : number,
    "string"  : string,
    "boolean" : boolean
    "date"    : Date,
}


///////////////////////////////////////////////////////////////////////////////
//  6. Page Template  /////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export type PageTemplate = ObjectTemplate & {
    type: TemplateType.Page
}


///////////////////////////////////////////////////////////////////////////////
//  7. Text Block Template  ///////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


export type TextBlockTemplate = ObjectTemplate & {
    type: TemplateType.TextBlock,
    color: string,
    text : Field,
    anchor_template: string
}
