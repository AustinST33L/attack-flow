Standard
========

Overview
--------

Attack Flow *represents* the linkage of adversary **behavior** for a given attack
flow. The type, description, and required attributes of each field are provided
in the subsequent sections along with an example.

.. figure:: _static/model.png
   :alt: Entity diagram for Attack Flow
   :scale: 50%
   :align: center

   Entities used in the Attack Flow language.


Rules
-----

These are rules that cannot be captured in JSON schema.

1. Relationships must be compliant with `OWL <https://www.w3.org/OWL/>`__.
2. See the Relationships Table for valid Attack Flow relationships

Data Dictionary
---------------

.. JSON_SCHEMA Generated by `af` tool at 2022-07-22T14:21:44.671567Z

.. _schema_toplevel:

Top Level
~~~~~~~~~

flow : :ref:`schema_flow`
  *Required: yes*

  An Attack Flow Meta object

actions : array of :ref:`schema_actions`
  *Required: yes*

  The list of action nodes in the attack flow

assets : array of :ref:`schema_assets`
  *Required: yes*

  The list of asset nodes in the attack flow

relationships : array of :ref:`schema_relationships`
  *Required: yes*

  The list of relationship edges in the attack flow. All Actions MUST
  have a relationship to the flow. See Relationships table for valid
  pairs of source and target entities.

data_properties : array of :ref:`schema_dataproperties`
  *Required: yes*

  Data properties associate actions, assets, properties, or flows with
  a piece of data.

object_properties : array of :ref:`schema_objectproperties`
  *Required: yes*

  Object properties relate, actions, assets, properties, or flows to
  other assets, properties, or flows. (Some rules apply.)


.. _schema_flow:

Flow
~~~~

type : enum
  *Required: yes*

  Indicate that this is an Attack Flow. (Enum values: "attack-flow")

id : uri
  *Required: yes*

  The identifier for this Attack Flow. MUST be unique within this
  document. TODO: Ideally is unique among Attack Flows produced by a
  particular organization.

name : string
  *Required: yes*

  The name of the Attack Flow.

created : date-time
  *Required: yes*

  Creation time of the Attack Flow. (RFC-3339 format, e.g. YYYY-MM-
  DDThh:mm:ssZ)

author : string
  *Required: no*

  The author of the Attack Flow.

description : string
  *Required: no*

  The description of the Attack Flow.


.. _schema_actions:

Actions
~~~~~~~

id : uri
  *Required: yes*

  The identifier for this Action. MUST be unique within this document.

type : enum
  *Required: no*

  Indicate that this is an Action (Enum values: "action")

name : string
  *Required: yes*

  The name of the action. May be an ATT&CK technique name.

description : string
  *Required: yes*

  A description of the action.

timestamp : date-time
  *Required: no*

  The timestamp when this action was observed. (RFC-3339 format, e.g.
  YYYY-MM-DDThh:mm:ssZ)

reference : string
  *Required: no*

  A reference for the action. May be a URL to an ATT&CK technique.

succeeded : number
  *Required: no*

  Float from 0 (failed) to 1 (succeeded) or distribution representing
  the probability that action succeeded in its effects. Any effects
  which may be separable should be defined through a separate action.
  Assumed to be 1 (100% ~ TRUE) if not included.

confidence : number
  *Required: no*

  Float from 0 to 1 or distribution representing the confidence that
  the action succeeded. Assumed to be 1 (100% ~ ground truth) if not
  included.

logic_operator_language : string
  *Required: no*

  The language of the logic_operator. Defaults to flow-vTBD when left
  blank.

logic_operator : string
  *Required: yes*

  The logic_operator may be any logic valid in the language defined by
  the logic_operator_language. If the logic_operator_language is
  undefined, the logic_operator may be AND or OR, representing the
  relative operation on all required-by relationships. The
  logic_operator must return the state changes to the provides
  relationships. Inputs to the logic_operator are required-by Assets
  and their states; outputs of the logic_operator are provides Assets
  and their states updates.


.. _schema_assets:

Assets
~~~~~~

id : uri
  *Required: yes*

  The identifier for this Asset. MUST be unique within this document.

type : enum
  *Required: no*

  Indicate that this is an Asset (Enum values: "asset")

state : string
  *Required: no*

  A property that may be used as a transient string representing the
  state of the object during a point in time representing the current
  state of the system. The sum of all object states is the state of
  the system. This may be as simple as "compromised", the
  Confidentiality, Integrity, Availability triad, DIMFUI (Degradation,
  Interruption, Modification, Fabrication, Unauthorized Use, and
  Interception), or it may even be an arbitrary string. If not
  included, it is assumed that the state is 'compromised' after a
  parent action succeeds.


.. _schema_relationships:

Relationships
~~~~~~~~~~~~~

source : uri
  *Required: yes*

  The source flow, action, or asset for this relationship.

type : uri
  *Required: yes*

  The type of relationship.

target : string
  *Required: yes*

  The target flow, action, or asset.


.. _schema_dataproperties:

Data Properties
~~~~~~~~~~~~~~~

type : uri
  *Required: yes*

  Type (or "name") of property.

source : uri
  *Required: yes*

  The source flow, action, asset, or property for this property.

target : string
  *Required: yes*

  Value for the specific type for the source object.


.. _schema_objectproperties:

Object Properties
~~~~~~~~~~~~~~~~~

type : uri
  *Required: yes*

  Type (or "name") of property.

source : uri
  *Required: yes*

  The source flow, action, asset, or property for this property.

target : uri
  *Required: yes*

  Target flow, asset, or property for this property.


.. /JSON_SCHEMA

Relationships
-------------

This table describes what entities are valid source/target pairs for
Relationship objects.

.. raw:: html

    <table>
      <tr>
          <th>From\To</th>
          <th>Asset</th>
          <th>Action</th>
          <th>Object Property</th>
      </tr>
      <tr>
          <th>Asset</th>
          <td style="color: red;">NOT VALID</td>
          <td style="color: blue;">&lt;state&gt;</td>
          <td style="color: purple;">&lt;type&gt;</td>
      </tr>
      <tr>
          <th>Action</th>
          <td style="color: blue;">&lt;state change&gt;</td>
          <td style="color: red;">NOT VALID</td>
          <td style="color: purple;">&lt;type&gt;</td>
      </tr>
      <tr>
          <th>Object Property</th>
          <td style="color: purple;">&lt;type&gt;</td>
          <td style="color: purple;">&lt;type&gt;</td>
          <td style="color: purple;">&lt;type&gt;</td>
      </tr>
    </table>

*Legend*

.. raw:: html

  <ul>
    <li><span style="color: red;">Not permitted by the schema.</span></li>
    <li><span style="color: blue;">Instance of Relationship.</span></li>
    <li><span style="color: purple;">Instance of Object Property.</span></li>
  </ul>

Corpus of Attack Flows
----------------------

This Attack Flow maps the Tesla incident report into the Attack Flow schema. This
mapping is based on multiple sources, including `ZDNet's coverage of the incident
<https://www.zdnet.com/article/tesla-systems-used-by-hackers-to-mine-cryptocurrency/>`__.

.. figure:: _static/tesla-flow.png
   :alt: Tesla incident Attack Flow
   :scale: 50%
   :align: center

   An example attack flow for the Tesla incident.

The project has :doc:`example_flows` where publicly reported breaches are mapped
into the Attack Flow language.